// From Victor Gordan's tutorial on compute shaders in OpenGL
// https://www.youtube.com/watch?v=nF4X9BIUzx0

#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, set = 0, binding = 0) uniform image2D u_OutputImage;

void main() {
    vec4 pixel = vec4(0.075, 0.133, 0.173, 1.0);
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 dims = imageSize(u_OutputImage);
    float x = -(float(pixel_coords.x * 2 - dims.x) / dims.x); // transforms to [-1.0, 1.0]
    float y = -(float(pixel_coords.y * 2 - dims.y) / dims.y); // transforms to [-1.0, 1.0]

    float fov = 90.0;
    vec3 cam_o = vec3(0.0, 0.0, -tan(fov / 2.0));
    vec3 ray_o = vec3(x, y, 0.0);
    vec3 ray_d = normalize(ray_o - cam_o);

    vec3 sphere_c = vec3(0.0, 0.0, -5.0);
    float sphere_r = 1.0;

    vec3 o_c = ray_o - sphere_c;
    float b = dot(ray_d, o_c);
    float c = dot(o_c, o_c) - sphere_r * sphere_r;
    float intersectionState = b * b - c;
    vec3 intersection = ray_o + ray_d * (-b + sqrt(b * b - c));

    if (intersectionState >= 0.0)
        pixel = vec4((normalize(intersection - sphere_c) + 1.0) / 2.0, 1.0);

    imageStore(u_OutputImage, pixel_coords, pixel);
}