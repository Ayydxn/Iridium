import org.gradle.internal.os.OperatingSystem

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
    id 'org.ajoberstar.grgit' version "5.2.1"
    id "io.github.pacifistmc.forgix" version "1.2.6"
}

switch (OperatingSystem.current()) {
    case OperatingSystem.WINDOWS: {
        def osArch = System.getProperty("os.arch")

        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
    }

    case OperatingSystem.MAC_OS: {
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    }

    case OperatingSystem.LINUX: {
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")

        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }

        break
    }
}

architectury {
    minecraft = rootProject.minecraft_version
}

forgix {
    group = "${rootProject.maven_group}.iridium"
    mergedJarName = "iridium-${getIridiumVersionString()}.jar"
    outputDir = "build/forgix"

    fabric {
        jarLocation = "build/libs/iridium-${getIridiumVersionString()}.jar"
    }

    custom {
        projectName = "neoforge"
        jarLocation = "build/libs/iridium-${getIridiumVersionString()}.jar"
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "org.quiltmc:quilt-mappings:${rootProject.minecraft_version}+build.${rootProject.quilt_mappings_version}:intermediary-v2"
    }

    processResources {
        def expandProps = [
                "name": rootProject.mod_name,
                "version": "${rootProject.mod_version}",
                "description": rootProject.mod_description,
                "id": rootProject.mod_id,
                "author": rootProject.mod_author,
                "icon_path": rootProject.icon_path,
                "issue_tracker_url": rootProject.issue_tracker_url,
                "license": rootProject.license,
                "minecraft_version": rootProject.minecraft_version,
                "minecraft_version_range": rootProject.minecraft_version_range,
                "architectury_version": rootProject.architectury_version,
                "architectury_version_range": rootProject.architectury_version_range,
                "fabric_loader_version": rootProject.fabric_loader_version,
                "fabric_version": rootProject.fabric_api_version,
                "neoforge_version": rootProject.neoforge_version,
                "neoforge_version_range": rootProject.neoforge_version_range,
                "yacl_version": rootProject.yacl_version
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }

        inputs.properties(expandProps)
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = rootProject.archives_base_name
    }

    version = getIridiumVersionString()
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.

        maven {
            name "NeoForged"
            url "https://maven.neoforged.net/releases/"
        }

        maven {
            name "Quilt"
            url "https://maven.quiltmc.org/repository/release"
        }

        maven {
            name "Xander's Maven"
            url "https://maven.isxander.dev/releases"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

tasks.mergeJars.dependsOn(build)

def getIridiumVersionString() {
    StringBuilder stringBuilder = new StringBuilder()
    boolean isADistributionBuild = project.hasProperty("build.distribution")
    String buildID = System.getenv("GITHUB_RUN_NUMBER")

    stringBuilder.append("${rootProject.mod_version}-mc${rootProject.minecraft_version}")

    if (!isADistributionBuild)
    {
        stringBuilder.append("+snapshot")

        if (buildID != null)
        {
            stringBuilder.append("-build.${buildID}")
        }
        else
        {
            stringBuilder.append("-local")
        }
    }

    return stringBuilder.toString()
}
