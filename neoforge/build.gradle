plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

base {
    archivesName = "${rootProject.archives_base_name}-neoforge-mc${project(":common").minecraft_version}"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    modImplementation(include("dev.isxander.yacl:yet-another-config-lib-neoforge:${rootProject.yacl_version}")) {
        transitive = false
    }

    // LWJGL and Vulkan. Thanks to Minecraft, LWJGL's core is already present so we don't need to include it here.
    implementation include("org.lwjgl:lwjgl-shaderc:${rootProject.lwjgl_version}")
    implementation include("org.lwjgl:lwjgl-vma:${rootProject.lwjgl_version}")
    implementation include("org.lwjgl:lwjgl-vulkan:${rootProject.lwjgl_version}")

    forgeRuntimeLibrary("org.lwjgl:lwjgl-shaderc:${rootProject.lwjgl_version}")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-vma:${rootProject.lwjgl_version}")
    forgeRuntimeLibrary("org.lwjgl:lwjgl-vulkan:${rootProject.lwjgl_version}")

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64")
        runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}


processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
